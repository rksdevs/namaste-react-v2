package.json file is a configuration file for npm
these packages are also known as dependencies
bundlers - like vite, parcel, webpack their job is to bundle your application and its dependencies together and ship it for production
-D while installing npm packages: It implies that the package which is being installed is a dependency for development env otherwise a development dependency
~ vs ^ in npm dependencies versions: ~ is Approximately equivalent version - will update the package to all future patch versions without increamenting the minor version, like 1.2.3 will be updated to 1.3. Where as ^ is Compatible with version - will update the package to all minor or patch versions without updating it to a major version, so 1.2.3 will be updated to 1.2.4 but never to 1.3
package-lock.json: package-lock.json is automatically generated by npm when packages are installed or updated. It provides a detailed description of the dependency tree, including the exact versions of packages and their dependencies that were installed. It also includes integrity hashes for each package, ensuring the integrity and security of the installed dependencies. The purpose of package-lock.json is to guarantee that subsequent installations on different machines or at different times will result in the exact same dependency tree.
npm vs npx command: npm essentially is a command to manage packages within the package manager, where as npx is used to execute the package itself, or to use the package itself
why is using react cdn to utilize react in our project not an efficient means? Because it makes an API call which is a heavy task, on the other hand if we use npm to get react into our project, we can utilize all the advantages of npm, like version management, tracking dependency tree etc and make sure our app runs in all env and machines without having an issue with the versions of react
difference between a type=module and a regular script tag: when we set type=module, we imply that the js file is an ECMAScript Module and not a regular js file. It comes with following benefits - Scoping - all functions and variable defined within the module are scoped to be used inside the module only and are not globally scoped, to use them in other modules it needs to be exported. Export and Import keywords allow us exporting and importing such functions and variables to be used in other modules, which is also known as modular development for code reusability. It also makes the code asynchronous which wont block the rendering of the HTML codes. It allows CORS headers for fetching modules from different origins. Finally it has strict mode enabled by default.
HMR : Hot Module Replacement - this is used to achieve automatic page re-render when there are certain changes to the code
Parcel achieves HMR by using a File Watcher Algorithm built in C++
Parcel uses Caching - to rebuild faster
Parcel does the following things as well: Image Optimization, Minification, Bundle, Compression, code splitting, consistent hashing, differential bundling (for cross browser compatibility) , diagonistic, error handling, HTTPs, Tree Shaking - remove unused code